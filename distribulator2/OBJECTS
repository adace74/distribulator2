######################################################################
#
# $Id$
#
######################################################################

Various objects required for the distribulator to function happily.

Object Package Structure
------------------------

engine.*        Core classes sepcific to this application.
engine.data.*   Data classes specific to this application.
generic.*       Generic classes -not- specific to this application.

And no, unfortunately they aren't really setup to be imported
in this fashion.  See the code for the preferred method.  :)

Method Classes
--------------

- engine.BatchRunner class

This class shall represent the ability to run commands in a batch fashion,
acting as a controller for other classes.  Any additional functionality
(email notification for example) for batch-only mode should be added here.

- engine.CommandLine class

This class shall represent the distribulator command-line interface.
It will take care of any work regarding GNU readline functionality,
and act as a controller of other classes to perform actual work.

- engine.CommandRunner class

The heart of the system, this class shall implement the actual command parsing
capabilities of the engine.  Its main purpose is to handle "internal" commands.

- engine.ConfigLoader class 

This class takes care of loading in settings for the GlobalConfig object,
history for GNU readline, etc.

- engine.XMLFileParser class

This class take care of the burder associated with reading in our XML-based
config, and construction appropriate Server/ServerGroup objects.

Once created, most objects are stored for easy-access via the GlobalConfig
object.

Generic Classes
---------------

- generic.FilePrinter class

This class implements a quick'n'dirty API to print files on STDOUT.

- generic.HostPinger class

This class shall implement a simple API to allow us to attempt to connect
to a server via TCP/22 before attempting scp/ssh to that machine.
It should take protocol type and remote port number as arguments to be truly
generic.

- generic.SysLogger class 

This class shall implement a simple API to wrap around Python's built-in syslog
class.  Syslog itself should help us in this endeavor assuming we log events
with the correct "level" (i.e. DEBUG, INFO, CRIT, etc).

Data Classes
------------

- engine.data.InternalCommand
- engine.data.ExternalCommand

Data storage classes which will hold all relevant information regarding a given
command.

- engine.data.GlobalConfig class.

A data storage class which will hold all relevant information regarding
the global configuration of the program.  It will hold startup settings,
binary locations, collections of ServerGroup and Server objects, etc. 

- engine.storage.Server class.

A data storage class which will hold all relevant information regarding a given server.

- engine.storage.ServerGroup class.

A collection of Server classes representing a server group.
Should also provide the ability to return Server lists in either a pre-defined
or sorted order.
