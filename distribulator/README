#
# $Id$
#
######################################################################

WARNING:  DANGER, DANGER, WILL ROBINSON!
          YOU ARE ENTERING AN ALPHA CODE ZONE.
          ALL CODE FOUND IN THIS ZONE IS CONSIDERED OF ALPHA QUALITY
          AND MAY NOT FUNCTION APPROPRIATELY, IF AT ALL.
          YOU HAVE BEEN WARNED.

You have found perhaps the world's only Open Source
distributed server shell.

Website Easy URL: http://distribulator.turing.com/
Website Real URL: http://sourceforge.net/projects/distribulator/
Announcement Mailing List:
	distribulator-announce-subscribe@lists.sourceforge.net

What Is It?
-----------

The Distribulator concept arised after working with an environment
consisting of about 500 servers, mostly held together with duct tape,
rubber bands, some random scripts, and SSH(okay, I lied about the first
two, but you get the idea).

Despite everyone's best efforts in the rush to keep things working,
no unified effort was made to create a tool that would allow us to
manage various sets of servers in a sane manner.

If completed, the Distribulator will be a shell-like perl-based console
interface designed to "wrap" around SSH in a manner such that
atomic transactions can be applied to multiple servers in
multiple environments, without giving the end-user enough flexibility
to shoot themselves in the foot(I call this the
"Oh crap!  That was production?" situation).

What Will It Do?
----------------

Legend For Features Below:
"-" Indicates a feature that hasn't even been started on.
"+" Indicates a feature that is currently being developed.
"*" Indicates a feature that is at least 80%(if not 100%) complete.

Feature List For v0.3 (Shipped):

* Some semblance of a shell, include a useful prompt.
  Now includes 'cat', 'cd', and 'ls' for local server browsing.
* Ability to load in text-based lists of servers, representing
  server sets.
* Ability to load in different remote usernames for different server sets
  from a text file.
  (i.e. apache@web01, tomcat@app01)
* Ability to work with -one- environment of servers at a time,
  specified at startup via --env=my_environment.
  The idea here is not allow users to mix devel, testing, and production worlds.
* Attempts to connect to all servers port 22, -before- running ssh.
  This health-check prevents "session hang" that can occur by running
  ssh alone.
* Single remote server command execution.
* Multiple set-based remote server command execution.
* Pattern-based group and server name matching for the lazy sysadmin
  in all of us.

Feature List For v0.4-v0.45 (Shipped):
* Addition of the "login" command.  Basically allows the user to specify
  a server to login to without having to exit the distribulator.
* Addition of --noping for environments where either a ServerPing is
  undesirable or the installed version of Net::Ping is out-of-date.
* Addition of the "all" group.  This will allow one to run any command
  across every group in the started-up environment.
* Addition of the ability to read in a text-file list of common Unix commands.
* Addition of the ability to distinguish those commands as external and
  simply pass them through to the underlying shell via perl's system() call.

Spontaneous Feature List For v0.47 (Shipped):
* Modularized codebase.  Still not all that generic, but at least
  broken out by functionality.  There's still way too many
  inter-dependancies, but it's at least more manageable.
* Various fixes, including that of the Net::Ping code,
  no CPAN module addon required.  Removed --noping as the underlying
  assumption behind it is not valid.
* Term::ReadLine::GNU & GNU libreadline are now required for this
  software to perform correctly(or even run it seems).
* Lots of GNU libreadline functionality: history load/save,
  tab-completion of first word command, some CTRL-C / CTRL-D integration.
* Crude attempts to fix problems relating to running distribulator,
  then exiting and having one's term act very flakey.
* Added ability to abort a command while executing on X servers.
  (Hold down CTRL-C, or just hit it a number of times)
* Improved testing process, thus improved stability.

Feature List For v0.5 (Coming Soon!):

* Single local server file to single remote server file copy.
(i.e. scp adace@localhost:/tmp/blah adace@remote01:/some/other/path)
* Single local server file to many remote serveres file copy.
(i.e. scp adace@localhost:/tmp/blah adace@remote[01-10]:/some/other/path)
- Single remote server file to single remote server file copy.
(i.e. scp adace@remote01:/tmp/blah adace@remote02:/some/other/path/)
- Single remote server file to many remote serveres file copy.
(i.e. scp adace@remote01:/tmp/blah adace@remote[01-10]:/some/other/path)

Feature List For v0.7 (A little farther out):

- Regular expression support in server hostnames.
- Sudo-based remote permissions checking.
- Other random pie-in-the-sky dreamsicle features.

Feature List For v1.0 (Will we ever get here?  Who knows!):

- Integration with ncurses such that one could run a command on 4 servers
  in parallel, and see the output from each of them?
- Auditing capabilities via syslog?
- Other random pie-in-the-sky dreamsicle features.

Who Is Working On It?
---------------------

Currently there's just me.  However, I'd appreciate all the help I can get!
Whatever company you might work for, your efforts are welcome here.
Just send me an email, feel free to put something akin to
"DISTRIBULATOR CODER NEEDS ACCESS" in the subject line lest I confuse
legit email with spam.

--Adam W. Dace <adam@turing.com>
